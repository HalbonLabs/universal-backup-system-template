# Project Health Check Script\n# Provides real-time status of project health\n\nWrite-Host \"Project Health Check\" -ForegroundColor Cyan\nWrite-Host \"========================\" -ForegroundColor Cyan\n\n$overall = \"healthy\"\n$warnings = @()\n$criticalIssues = @()\n\n# Check build status\nWrite-Host \"`nBuild Status\" -ForegroundColor Blue\ntry {\n    npm run build 2>$null\n    if ($LASTEXITCODE -eq 0) {\n        Write-Host \"  ‚úÖ Build: PASSING\" -ForegroundColor Green\n    } else {\n        Write-Host \"  ‚ùå Build: FAILING\" -ForegroundColor Red\n        $criticalIssues += \"Build is broken\"\n        $overall = \"critical\"\n    }\n} catch {\n    Write-Host \"  ‚ùå Build: ERROR\" -ForegroundColor Red\n    $criticalIssues += \"Build system error\"\n    $overall = \"critical\"\n}\n\n# Check tests\nWrite-Host \"`nTest Status\" -ForegroundColor Blue\ntry {\n    npm test 2>$null\n    if ($LASTEXITCODE -eq 0) {\n        Write-Host \"  ‚úÖ Tests: PASSING\" -ForegroundColor Green\n    } else {\n        Write-Host \"  ‚ö†Ô∏è  Tests: FAILING\" -ForegroundColor Yellow\n        $warnings += \"Some tests are failing\"\n        if ($overall -ne \"critical\") { $overall = \"warning\" }\n    }\n} catch {\n    Write-Host \"  ‚ö†Ô∏è  Tests: NOT AVAILABLE\" -ForegroundColor Yellow\n    $warnings += \"Test suite not configured\"\n}\n\n# Check TypeScript\nWrite-Host \"`nTypeScript Status\" -ForegroundColor Blue\ntry {\n    npm run typecheck 2>$null\n    if ($LASTEXITCODE -eq 0) {\n        Write-Host \"  ‚úÖ Types: NO ERRORS\" -ForegroundColor Green\n    } else {\n        Write-Host \"  ‚ùå Types: ERRORS DETECTED\" -ForegroundColor Red\n        $criticalIssues += \"TypeScript errors present\"\n        $overall = \"critical\"\n    }\n} catch {\n    Write-Host \"  ‚ö†Ô∏è  Types: CHECK UNAVAILABLE\" -ForegroundColor Yellow\n}\n\n# Check security\nWrite-Host \"`nSecurity Status\" -ForegroundColor Blue\ntry {\n    npm audit --audit-level moderate 2>$null\n    if ($LASTEXITCODE -eq 0) {\n        Write-Host \"  ‚úÖ Security: NO VULNERABILITIES\" -ForegroundColor Green\n    } else {\n        Write-Host \"  ‚ö†Ô∏è  Security: VULNERABILITIES FOUND\" -ForegroundColor Yellow\n        $warnings += \"Security vulnerabilities detected\"\n        if ($overall -ne \"critical\") { $overall = \"warning\" }\n    }\n} catch {\n    Write-Host \"  ‚ö†Ô∏è  Security: AUDIT FAILED\" -ForegroundColor Yellow\n}\n\n# Check last checkpoint\nWrite-Host \"`nCheckpoint Status\" -ForegroundColor Blue\n$latestCheckpoint = git tag -l \"checkpoint-daily-*\" | Sort-Object | Select-Object -Last 1\nif ($latestCheckpoint) {\n    $checkpointDate = ($latestCheckpoint -split \"-\")[-1]\n    if ($checkpointDate.Length -ge 8) {\n        $year = $checkpointDate.Substring(0, 4)\n        $month = $checkpointDate.Substring(4, 2)\n        $day = $checkpointDate.Substring(6, 2)\n        \n        try {\n            $checkpointDateTime = Get-Date -Year $year -Month $month -Day $day\n            $daysSince = [math]::Floor((Get-Date - $checkpointDateTime).TotalDays)\n            \n            Write-Host \"  Last checkpoint: $latestCheckpoint ($daysSince days ago)\" -ForegroundColor Gray\n            \n            if ($daysSince -gt 7) {\n                Write-Host \"  ‚ùå DANGER: No checkpoint in $daysSince days\" -ForegroundColor Red\n                $criticalIssues += \"No checkpoint in over 7 days\"\n                $overall = \"critical\"\n            } elseif ($daysSince -gt 2) {\n                Write-Host \"  ‚ö†Ô∏è  WARNING: No recent checkpoint\" -ForegroundColor Yellow\n                $warnings += \"No checkpoint in $daysSince days\"\n                if ($overall -ne \"critical\") { $overall = \"warning\" }\n            } else {\n                Write-Host \"  ‚úÖ Recent checkpoint available\" -ForegroundColor Green\n            }\n        } catch {\n            Write-Host \"  ‚ö†Ô∏è  Checkpoint date format issue\" -ForegroundColor Yellow\n        }\n    } else {\n        Write-Host \"  ‚ö†Ô∏è  Checkpoint format issue\" -ForegroundColor Yellow\n    }\n} else {\n    Write-Host \"  ‚ùå NO CHECKPOINTS FOUND\" -ForegroundColor Red\n    $criticalIssues += \"No checkpoints created yet\"\n    $overall = \"critical\"\n}\n\n# Overall status\nWrite-Host \"`n\" -NoNewline\nswitch ($overall) {\n    \"healthy\" { \n        Write-Host \"üü¢ OVERALL STATUS: HEALTHY\" -ForegroundColor Green\n        Write-Host \"   Everything looks good! Safe to continue development.\" -ForegroundColor Green\n    }\n    \"warning\" { \n        Write-Host \"üü° OVERALL STATUS: WARNING\" -ForegroundColor Yellow\n        Write-Host \"   Some issues detected. Address when convenient.\" -ForegroundColor Yellow\n    }\n    \"critical\" { \n        Write-Host \"üî¥ OVERALL STATUS: CRITICAL\" -ForegroundColor Red\n        Write-Host \"   Critical issues found! Fix immediately.\" -ForegroundColor Red\n    }\n}\n\n# Show warnings\nif ($warnings.Count -gt 0) {\n    Write-Host \"`n‚ö†Ô∏è  WARNINGS:\" -ForegroundColor Yellow\n    foreach ($warning in $warnings) {\n        Write-Host \"   ‚Ä¢ $warning\" -ForegroundColor Yellow\n    }\n}\n\n# Show critical issues\nif ($criticalIssues.Count -gt 0) {\n    Write-Host \"`n‚ùå CRITICAL ISSUES:\" -ForegroundColor Red\n    foreach ($issue in $criticalIssues) {\n        Write-Host \"   ‚Ä¢ $issue\" -ForegroundColor Red\n    }\n    Write-Host \"`nüîß RECOMMENDED ACTIONS:\" -ForegroundColor Cyan\n    Write-Host \"   1. Fix critical issues immediately\" -ForegroundColor White\n    Write-Host \"   2. Or rollback with: npm run checkpoint:rollback\" -ForegroundColor White\n    Write-Host \"   3. Create checkpoint after fixes: npm run checkpoint:daily\" -ForegroundColor White\n}\n\nWrite-Host \"`n\" -NoNewline\nif ($overall -eq \"critical\") {\n    exit 1\n} else {\n    exit 0\n}
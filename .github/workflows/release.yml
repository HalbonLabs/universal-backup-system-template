name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install PowerShell
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https software-properties-common
        wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell
        
    - name: Run Full Validation Suite
      shell: pwsh
      run: |
        Write-Host "üîç Running release validation..." -ForegroundColor Cyan
        
        # Run all validation scripts
        ./scripts/security-validation.ps1
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Security validation failed"
          exit 1
        }
        
        ./scripts/health-check.ps1
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Health check failed"
          exit 1
        }
        
        # Validate all core files exist
        $requiredFiles = @(
          "README.md",
          "QUICKSTART.md", 
          "install.ps1",
          "scripts/checkpoint-simple.ps1",
          "scripts/health-check.ps1",
          "scripts/ai-safety-check.ps1",
          "scripts/rollback-daily.ps1",
          ".github/template-repository.yml"
        )
        
        foreach ($file in $requiredFiles) {
          if (-not (Test-Path $file)) {
            Write-Error "Required file missing: $file"
            exit 1
          }
        }
        
        Write-Host "‚úÖ Release validation passed" -ForegroundColor Green

  create-release-assets:
    name: Create Release Assets
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install PowerShell
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https software-properties-common
        wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell
        
    - name: Create Release Package
      shell: pwsh
      run: |
        $version = "${{ github.ref_name }}"
        if ("${{ github.event.inputs.version }}") {
          $version = "${{ github.event.inputs.version }}"
        }
        
        Write-Host "üì¶ Creating release package for $version" -ForegroundColor Cyan
        
        # Create release directory
        $releaseDir = "universal-backup-system-$version"
        New-Item -ItemType Directory -Path $releaseDir -Force | Out-Null
        
        # Copy core files
        $filesToCopy = @(
          "scripts/",
          "examples/",
          ".github/",
          "README.md",
          "QUICKSTART.md", 
          "TEMPLATE-SUMMARY.md",
          "install.ps1",
          "LICENSE",
          "CONTRIBUTING.md",
          ".gitignore.template",
          ".env.templates",
          "notification-config.json.example",
          "security-config.ini"
        )
        
        foreach ($item in $filesToCopy) {
          if (Test-Path $item) {
            if (Test-Path $item -PathType Container) {
              Copy-Item -Path $item -Destination "$releaseDir/" -Recurse -Force
            } else {
              Copy-Item -Path $item -Destination "$releaseDir/" -Force
            }
          }
        }
        
        # Create release notes
        $releaseNotes = @"
        # Universal Backup System $version
        
        ## üöÄ What's New in This Release
        
        - Framework-agnostic backup and checkpoint system
        - Cross-platform PowerShell compatibility (Windows, Linux, macOS)
        - AI safety protocol integration
        - Comprehensive health monitoring
        - Security validation and pre-commit hooks
        - Performance monitoring and error tracking
        - Notification system templates
        - GitHub template repository support
        
        ## üìã Supported Frameworks
        
        - **Frontend**: React, Vue, Angular, SvelteKit, Next.js
        - **Backend**: Node.js, Express, Python, Ruby, PHP
        - **Mobile**: React Native, Flutter
        - **Desktop**: Electron, Tauri
        - **Static**: Jekyll, Hugo, Gatsby
        
        ## ‚ö° Quick Start
        
        1. Use this template to create a new repository
        2. Clone your repository
        3. Run ``./install.ps1`` to install the backup system
        4. Start using: ``npm run save "Your message"``
        
        ## üì¶ Installation Methods
        
        ### GitHub Template (Recommended)
        Click "Use this template" on the GitHub repository page.
        
        ### Direct Download
        Download and extract this release package to your project.
        
        ### Manual Installation
        Copy the ``scripts/`` folder to your project and run the installer.
        
        ## üîß System Requirements
        
        - PowerShell 5.1+ (Windows) or PowerShell Core 6+ (Linux/macOS)
        - Git repository
        - Any supported framework (optional)
        
        ## üìö Documentation
        
        - [README.md](README.md) - Complete documentation
        - [QUICKSTART.md](QUICKSTART.md) - Get started in 5 minutes
        - [TEMPLATE-SUMMARY.md](TEMPLATE-SUMMARY.md) - Feature overview
        
        ## üõ°Ô∏è Security Features
        
        - Secret scanning and validation
        - Pre-commit security hooks
        - AI safety protocol checks
        - Dependency vulnerability scanning
        
        ## üìä Monitoring & Analytics
        
        - Performance monitoring
        - Build time tracking
        - Disk usage analysis
        - Git metrics and health checks
        
        ## üîî Notifications
        
        - Slack webhook integration
        - Discord notifications
        - Email alerts
        - Microsoft Teams support
        - Custom webhook endpoints
        
        ## ü§ù Contributing
        
        See [CONTRIBUTING.md](CONTRIBUTING.md) for development setup and contribution guidelines.
        
        ## üìÑ License
        
        MIT License - free for commercial and personal use.
        
        ---
        
        **Full Changelog**: https://github.com/your-username/backup-system-template/compare/v1.0.0...$version
        "@
        
        $releaseNotes | Out-File -FilePath "$releaseDir/RELEASE-NOTES.md" -Encoding UTF8
        
        # Create checksums
        Get-ChildItem -Path $releaseDir -Recurse -File | ForEach-Object {
          $hash = Get-FileHash $_.FullName -Algorithm SHA256
          "$($hash.Hash.ToLower()) *$($_.Name)" | Add-Content -Path "$releaseDir/SHA256SUMS" -Encoding UTF8
        }
        
        # Create archive
        Compress-Archive -Path $releaseDir -DestinationPath "$releaseDir.zip" -Force
        
        Write-Host "‚úÖ Release package created: $releaseDir.zip" -ForegroundColor Green
        
    - name: Upload Release Assets
      uses: actions/upload-artifact@v4
      with:
        name: release-assets
        path: universal-backup-system-*.zip
        retention-days: 90

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release-assets]
    permissions:
      contents: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download Release Assets
      uses: actions/download-artifact@v4
      with:
        name: release-assets
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Universal Backup System ${{ github.ref_name }}
        body: |
          ## üõ°Ô∏è Universal Backup & Checkpoint System ${{ github.ref_name }}
          
          A complete, framework-agnostic backup and checkpoint system for any development project.
          
          ### ‚ö° Quick Start
          1. **Use this template** to create a new repository
          2. **Clone** your repository: `git clone https://github.com/YOUR_USERNAME/YOUR_REPO.git`
          3. **Install**: `./install.ps1`
          4. **Use**: `npm run save "Your checkpoint message"`
          
          ### üéØ What's Included
          - ‚úÖ Cross-platform PowerShell scripts (Windows, Linux, macOS)
          - ‚úÖ Framework support: React, Vue, Angular, Node.js, Python, and more
          - ‚úÖ AI safety protocol integration
          - ‚úÖ Security validation and pre-commit hooks
          - ‚úÖ Performance monitoring and health checks
          - ‚úÖ Notification system (Slack, Discord, Email)
          - ‚úÖ GitHub template ready
          
          ### üìö Documentation
          - Complete setup guide in [README.md](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/README.md)
          - Quick start in [QUICKSTART.md](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/QUICKSTART.md)
          - Feature overview in [TEMPLATE-SUMMARY.md](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/TEMPLATE-SUMMARY.md)
          
          ### üîß System Requirements
          - PowerShell 5.1+ (Windows) or PowerShell Core 6+ (Linux/macOS)  
          - Git repository
          - Any supported framework (optional)
          
          ### üì¶ Installation Options
          1. **GitHub Template**: Click "Use this template" above
          2. **Release Download**: Download the zip file below
          3. **Direct Installation**: `git clone` and run `install.ps1`
          
          See the [documentation](https://github.com/${{ github.repository }}) for complete installation instructions.
        files: |
          universal-backup-system-*.zip
        draft: false
        prerelease: false

  update-template-metadata:
    name: Update Template Metadata  
    runs-on: ubuntu-latest
    needs: github-release
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Update Template Repository Metadata
      shell: pwsh
      run: |
        $version = "${{ github.ref_name }}"
        $templateFile = ".github/template-repository.yml"
        
        if (Test-Path $templateFile) {
          $content = Get-Content $templateFile -Raw
          
          # Update version in template metadata
          $content = $content -replace 'version: .*', "version: $version"
          $content = $content -replace 'updated: .*', "updated: $(Get-Date -Format 'yyyy-MM-dd')"
          
          $content | Out-File -FilePath $templateFile -Encoding UTF8 -NoNewline
          
          Write-Host "‚úÖ Updated template metadata to version $version" -ForegroundColor Green
        }

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: github-release
    if: always() && needs.github-release.result == 'success'
    steps:
    - name: Send Success Notification
      run: |
        echo "üéâ Universal Backup System ${{ github.ref_name }} released successfully!"
        echo "üì¶ Release: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
        echo "üöÄ Template: https://github.com/${{ github.repository }}/generate"